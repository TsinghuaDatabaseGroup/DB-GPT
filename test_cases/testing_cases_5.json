{"8": {"start_time": "1697303655", "end_time": "1697303804", "start_timestamp": "2023-10-15 01:14:15", "end_timestamp": "2023-10-15 01:16:44", "alerts": [{"receiver": "db-gpt", "status": "resolved", "alerts": [{"status": "resolved", "labels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "annotations": {"description": "node:ins:stdload1[ins=] = 1.75 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.75"}, "startsAt": "2023-10-15T01:14:49.467858611Z", "endsAt": "2023-10-15T01:15:49.467858611Z", "generatorURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9090/graph?g0.expr=node%3Ains%3Astdload1+%3E+1&g0.tab=1", "fingerprint": "ab4787213c7dd319"}], "groupLabels": {"alertname": "NodeLoadHigh"}, "commonLabels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "commonAnnotations": {"description": "node:ins:stdload1[ins=] = 1.75 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.75"}, "externalURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9093", "version": "4", "groupKey": "{}:{alertname=\"NodeLoadHigh\"}", "truncatedAlerts": 0}], "labels": ["FETCH_LARGE_DATA", "CORRELATED SUBQUERY"], "command": "python anomaly_trigger/main.py --anomaly FETCH_LARGE_DATA,CORRELATED_SUBQUERY", "script": "import  os\nimport re\nimport time\n\nimport psycopg2\n\n\nREPEATCOUNT = 1\nTIMELOGPATH = str(int(time.time())) + \"_tpch_trigger_time_log.txt\"\nTIMELOG = open(TIMELOGPATH, 'w+')\n\n\nclass Database():\n\n    def __init__(self):\n        self.conn = None\n        self.conn = psycopg2.connect(database='tpch',\n                                     user='xxxx',\n                                     password='xxxx',\n                                     host='xxxx',\n                                     port=5432)\n\n    def execute_sql(self, sql):\n        fail = 1\n        cur = self.conn.cursor()\n        i = 0\n        cnt = 3\n        while fail == 1 and i < cnt:\n            try:\n                fail = 0\n                cur.execute(sql)\n            except BaseException as error:\n                fail = 1\n                print(error)\n            res = []\n            if fail == 0:\n                res = cur.fetchall()\n            i = i + 1\n        if fail == 1:\n            # print(\"SQL Execution Fatal!!\", sql)\n            return 0, ''\n        elif fail == 0:\n            return 1, res\n\n\ndef all_sql_files():\n    res_path = \"{}/tpch-queries/\".format(\n        os.path.dirname(os.path.abspath(__file__)))\n    # all_file_list = list(filter(file_filter, os.listdir(res_path)))\n    # all_file_list = sorted(all_file_list, key=custom_sort)\n    all_file_list = [\n        '4.explain.sql']\n\n    print(all_file_list)\n    files_list = []\n    for file in all_file_list:\n        files_list.append(res_path + file)\n    return files_list\n\n\ndef custom_sort(item):\n    # \u63d0\u53d6\u6570\u5b57\u548c\u5b57\u6bcd\u90e8\u5206\n    match = re.match(r'(\\d+)(\\D+)', item)\n    # \u5c06\u6570\u5b57\u90e8\u5206\u8f6c\u6362\u4e3a\u6574\u6570\u4ee5\u8fdb\u884c\u6bd4\u8f83\n    num_part = int(match.group(1))\n    # \u8fd4\u56de\u5143\u7ec4\u4ee5\u6309\u6570\u5b57\u548c\u5b57\u6bcd\u6392\u5e8f\n    return (num_part, match.group(2))\n\n\ndef file_filter(f):\n    if f[-4:] == '.sql' and 'schema' not in f and 'fkindexes' not in f:\n        return True\n    else:\n        return False\n\n\ndef get_sql_from_file(file_name):\n    file = open(file_name)\n    lines = file.readlines().copy()\n    sql = ''\n    for line in lines:\n        sql += line\n    sql = sql.replace('\n', ' ').replace('   ', ' ').replace('  ', ' ')\n    file.close()\n    return sql\n\n\ndef test_hint_from_file(sql_file):\n    db = Database()\n    sql = get_sql_from_file(sql_file)\n    success, result_cont = db.execute_sql(sql)\n    print(success, result_cont)\n\n\ndef test_all():\n    sql_files = all_sql_files()\n\n    for sql_file in list(sql_files):\n        if sql_file:\n            test_hint_from_file(sql_file)\n\n\ndef test_one():\n    res_path = \"{}/tpch-queries/\".format(\n        os.path.dirname(os.path.abspath(__file__)))\n    test_hint_from_file(res_path + '1.explain.sql')\n\n\nif __name__ == '__main__':\n    for i in range(0, REPEATCOUNT):\n        TIMELOG.write(str(int(time.time()))+\";\")\n        test_all()\n        TIMELOG.write(str(int(time.time()))+\"\n\")\n        TIMELOG.flush()\n\n    TIMELOG.close()\n", "description": "In an online shopping platform's database, when trying to retrieve a large amount of data and perform related subqueries to determine the inventory for each product, the execution of these subqueries may not be optimized, leading to slower performance in querying the inventory.\n", "workload": {"select o_orderpriority, count(*) as order_count from orders where o_orderdate >= date ':1' and o_orderdate < date ':1' + interval '3' month and exists ( select * from lineitem where l_orderkey = o_orderkey and l_commitdate < l_receiptdate ) group by o_orderpriority order by o_orderpriority;": 1}, "slow_queries": ["select o_orderpriority, count(*) as order_count from orders where o_orderdate >= date ':1' and o_orderdate < date ':1' + interval '3' month and exists ( select * from lineitem where l_orderkey = o_orderkey and l_commitdate < l_receiptdate ) group by o_orderpriority order by o_orderpriority;"], "exceptions": {"cpu": {"node_procs_running": [1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 2.0, 1.0, 3.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 6.0, 1.0, 2.0, 9.0, 9.0, 2.0, 1.0, 4.0, 1.0, 2.0, 1.0, 2.0, 3.0, 7.0, 8.0, 1.0, 5.0, 7.0], "node_procs_blocked": [0.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 2.0, 2.0, 3.0, 4.0, 3.0, 4.0, 3.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0], "node_entropy_available_bits": [3519.0, 3523.0, 3549.0, 3569.0, 3590.0, 3611.0, 3632.0, 3653.0, 3673.0, 3694.0, 3715.0, 3736.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0], "node_load1": [2.26, 2.26, 2.32, 2.37, 2.37, 2.42, 2.42, 2.47, 2.51, 2.51, 2.55, 2.55, 2.59, 2.62, 2.62, 2.65, 2.65, 2.68, 2.7, 2.7, 2.73, 2.73, 2.75, 2.77, 2.77, 2.79, 2.79, 2.81, 2.82, 2.82, 2.84, 2.84, 3.01, 3.01, 3.01, 3.01, 3.01, 3.01, 3.01, 3.01, 3.01, 3.01, 3.09, 3.08, 3.08, 3.23, 3.23, 3.21, 3.28, 3.28]}, "io": {"node_filesystem_size_bytes": [212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0], "1-(node_filesystem_free_bytes": [0.432399308269829, 0.4324000221256725, 0.4324000414190736, 0.43240006071247483, 0.43240006071247483, 0.43240006071247483, 0.43240006071247483, 0.43240006071247483, 0.43240008000587604, 0.43240009929927714, 0.43240009929927714, 0.43240009929927714, 0.43240009929927714, 0.43240009929927714, 0.43240009929927714, 0.43240009929927714, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.4324008710353242, 0.432401179729743, 0.43262201199960804, 0.43304476900618516, 0.43328848324984537, 0.43352725838280437, 0.4338757743816547, 0.43422583385259916, 0.4344720176516099, 0.4347220601308559, 0.43500389813524065, 0.4351809343844353, 0.4354226421143731, 0.43570880184062133, 0.4360384874799236, 0.4363498058013058, 0.4368026605137181, 0.4368026605137181, 0.4368026605137181, 0.4368026605137181], "irate(node_disk_writes_completed_total": [1.6666666666666667, 1.0, 10.666666666666666, 12.666666666666666, 1.0, 1.0, 1.6666666666666667, 0.0, 1.6666666666666667, 0.0, 1.6666666666666667, 0.6666666666666666, 2.3333333333333335, 2.6666666666666665, 1.6666666666666667, 12.0, 79.0, 106.0, 100.33333333333333, 94.0, 130.33333333333334, 137.33333333333334, 91.66666666666667, 120.0, 72.0, 69.33333333333333, 73.66666666666667, 82.0, 95.66666666666667, 69.0, 72.0, 82.66666666666667, 122.66666666666667, 99.33333333333333, 93.66666666666667, 101.33333333333333, 96.66666666666667, 178.0, 106.33333333333333, 365.3333333333333, 411.6666666666667, 2007.6666666666667, 562.6666666666666, 71.0, 72.33333333333333, 74.33333333333333, 78.33333333333333, 73.0, 622.3333333333334, 2095.0], "node_disk_io_now": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "memory": {"node_memory_Inactive_anon_bytes": [235458560.0, 238903296.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 238989312.0, 241086464.0, 241086464.0, 241086464.0, 241086464.0, 241086464.0, 241086464.0, 289685504.0, 978120704.0, 1583427584.0, 1958223872.0], "node_memory_Buffers_bytes": [19365888.0, 19382272.0, 19382272.0, 17657856.0, 14364672.0, 11993088.0, 10735616.0, 9658368.0, 8556544.0, 7970816.0, 7974912.0, 7811072.0, 7643136.0, 7655424.0, 7569408.0, 7507968.0, 7507968.0, 7458816.0, 7409664.0, 7348224.0, 7299072.0, 7192576.0, 7069696.0, 6963200.0, 6877184.0, 6828032.0, 6717440.0, 6787072.0, 6746112.0, 6684672.0, 6672384.0, 7106560.0, 7098368.0, 7098368.0, 7098368.0, 7098368.0, 7098368.0, 7098368.0, 7094272.0, 7102464.0, 7106560.0, 7114752.0, 7102464.0, 7106560.0, 7110656.0, 7102464.0, 7557120.0, 7532544.0, 7397376.0, 7286784.0]}, "network": {"node_sockstat_TCP_tw": [9.0, 9.0, 9.0, 8.0, 10.0, 9.0, 9.0, 9.0, 8.0, 9.0, 9.0, 9.0, 9.0, 8.0, 9.0, 9.0, 9.0, 9.0, 6.0, 7.0, 8.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 7.0, 5.0, 6.0, 7.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 8.0, 7.0, 7.0], "node_sockstat_TCP_orphan": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_netstat_Tcp_PassiveOpens": [0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "node_sockstat_TCP_alloc": [22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0], "node_sockstat_TCP_inuse": [13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0]}}}, "0": {"start_time": "1697297150", "end_time": "1697297328", "start_timestamp": "2023-10-14 23:25:50", "end_timestamp": "2023-10-14 23:28:48", "alerts": [{"receiver": "db-gpt", "status": "resolved", "alerts": [{"status": "resolved", "labels": {"alertname": "NodeCpuHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "annotations": {"description": "node:ins:cpu_usage[ins=] = 0.99 > 70%\n", "summary": "WARN NodeCpuHigh @172.27.58.65:9100 0.99"}, "startsAt": "2023-10-14T23:26:49.467858611Z", "endsAt": "2023-10-14T23:27:49.467858611Z", "generatorURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9090/graph?g0.expr=node%3Ains%3Acpu_usage_1m+%3E+0.7&g0.tab=1", "fingerprint": "b97dc2cd4ed607f5"}], "groupLabels": {"alertname": "NodeCpuHigh"}, "commonLabels": {"alertname": "NodeCpuHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "commonAnnotations": {"description": "node:ins:cpu_usage[ins=] = 0.99 > 70%\n", "summary": "WARN NodeCpuHigh @172.27.58.65:9100 0.99"}, "externalURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9093", "version": "4", "groupKey": "{}:{alertname=\"NodeCpuHigh\"}", "truncatedAlerts": 0}], "labels": ["highly deletes"], "command": "python anomaly_trigger/main.py --anomaly VACUUM", "script": "import  psycopg2\nimport sys\nsys.path.append('/root/DB-GPT/')\nimport time\nimport datetime\nimport random\nimport yaml\nfrom multiprocessing.pool import *\n\n\nclass DBArgs(object):\n\n    def __init__(self, dbtype, config, dbname=None):\n        self.dbtype = dbtype\n        if self.dbtype == 'mysql':\n            self.host = config['host']\n            self.port = config['port']\n            self.user = config['user']\n            self.password = config['password']\n            self.dbname = dbname if dbname else config['dbname']\n            self.driver = 'com.mysql.jdbc.Driver'\n            self.jdbc = 'jdbc:mysql://'\n        else:\n            self.host = config['host']\n            self.port = config['port']\n            self.user = config['user']\n            self.password = config['password']\n            self.dbname = dbname if dbname else config['dbname']\n            self.driver = 'org.postgresql.Driver'\n            self.jdbc = 'jdbc:postgresql://'\n\nclass Database():\n    def __init__(self, args, timeout=-1):\n        self.args = args\n        self.conn = self.resetConn(timeout)\n\n\n        # self.schema = self.compute_table_schema()\n\n    def resetConn(self, timeout=-1):\n        conn = psycopg2.connect(database=self.args.dbname,\n                                            user=self.args.user,\n                                            password=self.args.password,\n                                            host=self.args.host,\n                                            port=self.args.port)\n        return conn\n    \n    def execute_sqls(self,sql):\n        self.conn =self.resetConn(timeout=-1)\n        cur = self.conn.cursor()\n        cur.execute(sql)\n        self.conn.commit()\n        cur.close()\n        self.conn.close()\n\n    def execute_sql_duration(self, duration, sql, max_id=0, commit_interval=500):\n        self.conn = self.resetConn(timeout=-1)\n        cursor = self.conn.cursor()\n        start = time.time()\n        cnt = 0\n        if duration > 0:\n            while (time.time() - start) < duration:\n                if max_id > 0:\n                    id = random.randint(1, max_id - 1)\n                    cursor.execute(sql + str(id) + ';')\n                else:\n                    cursor.execute(sql)\n                cnt += 1\n                if cnt % commit_interval == 0:\n                    self.conn.commit()\n        else:\n            print(\"error, the duration should be larger than 0\")\n        self.conn.commit()\n        cursor.close()\n        self.conn.close()\n        return cnt\n\n    def concurrent_execute_sql(self, threads, duration, sql, max_id=0, commit_interval=500):\n        pool = ThreadPool(threads)\n        results = [pool.apply_async(self.execute_sql_duration, (duration, sql, max_id, commit_interval)) for _ in range(threads)]\n        pool.close()\n        pool.join()\n        return results\n    \ndef init():\n    #add the config\n    config_path = \"/root/DB-GPT/config/tool_config.yaml\"\n    with open(config_path, 'r') as config_file:\n        config = yaml.safe_load(config_file) \n    db_args =DBArgs('pgsql', config)\n    return db_args\n\n\n#create a table\ndef create_table(table_name,colsize, ncolumns):\n    db=Database(init())\n    column_definitions = ', '.join(f'name{i} varchar({colsize})' for i in range(ncolumns))\n    creat_sql = f'CREATE TABLE {table_name} (id int, {column_definitions}, time timestamp);'\n    db.execute_sqls(creat_sql)\n\n#delete the table\ndef delete_table(table_name):\n    db=Database(init())\n    delete_sql=f'DROP TABLE if exists {table_name}'\n    db.execute_sqls(delete_sql)\n\n#print the current time\ndef print_time():\n    current_time = datetime.datetime.now()\n    formatted_time = current_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(formatted_time)\n\n\ndef vacuum(threads,duration,ncolumns,nrows,colsize,table_name='table1'):\n    db=Database(init())\n    #create a new table\n    print_time()\n    delete_table(table_name)\n    create_table(table_name,colsize, ncolumns)\n\n    # insert some data to be deleted\n    insert_definitions = ', '.join(f'(SELECT substr(md5(random()::text), 1, {colsize}))' for i in range(ncolumns))\n    insert_data=f'insert into {table_name} select generate_series(1,{nrows}),{insert_definitions}, now();' \n    db.execute_sqls(insert_data) \n\n    # delete 80% of the rows\n    delete_nrows=int(nrows*0.8)\n    vacuum=f'delete from {table_name} where id < {delete_nrows};'\n    db.execute_sqls(vacuum)\n\n    # do the select , then the vacuum occurs\n    select='select * from '+table_name+' where id='\n    db.concurrent_execute_sql(threads,duration,select,nrows)\n\n    #delete the table\n    delete_table(table_name)\n    print_time()\n\n\nif __name__ == \"__main__\":\n    # Number of threads to use for concurrent inserts\n    num_threads = 176\n    \n    # Duration for which to run the inserts (in seconds)\n    insert_duration = None\n    \n    # Number of columns in the table\n    num_columns = 18\n    \n    # Number of rows to insert\n    num_rows = 3167807\n    \n    # Size of each column (in characters)\n    column_size = 70\n    \n    # Table name\n    table_name = 'table1'\n    \n    # Call the insert_large_data function\n    vacuum(num_threads, insert_duration, num_columns, num_rows, column_size, table_name)\n", "description": "In an online marketplace, 176 users perform simultaneous searches on a database table containing 18 columns and 3,167,807 rows of product records. Each column has a size of 70 characters. The searches are conducted after a large-scale data cleaning operation, which causes a database exception due to increased workload and decreased performance.\n", "workload": {"delete from table1 where id < 2534245;":176}, "slow_queries": [], "exceptions": {"cpu": {"node_procs_running": [1.0, 3.0, 9.0, 2.0, 4.0, 8.0, 4.0, 11.0, 1.0, 5.0, 4.0, 4.0, 2.0, 1.0, 2.0, 4.0, 3.0, 5.0, 6.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 136.0, 186.0, 186.0, 186.0, 188.0, 186.0, 188.0, 191.0, 185.0, 182.0, 183.0, 186.0, 187.0, 194.0, 186.0, 188.0, 189.0, 185.0, 187.0, 187.0, 184.0, 183.0, 182.0, 182.0, 171.0, 168.0, 104.0, 53.0, 1.0], "node_procs_blocked": [0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 2.0, 1.0, 3.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 0.0, 0.0, 2.0, 4.0, 0.0, 0.0, 1.0, 0.0], "node_entropy_available_bits": [3501.0, 3502.0, 3513.0, 3539.0, 3559.0, 3578.0, 3597.0, 3619.0, 3639.0, 3653.0, 3680.0, 3700.0, 3716.0, 3741.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0], "node_load1": [2.13, 1.96, 1.88, 1.88, 1.89, 1.89, 1.82, 1.91, 1.91, 1.84, 1.84, 1.93, 2.02, 2.02, 2.1, 2.1, 2.01, 1.93, 1.93, 1.93, 1.93, 1.86, 1.87, 1.87, 1.8, 1.8, 1.82, 1.75, 1.75, 1.69, 1.69, 1.56, 16.25, 16.25, 29.84, 29.84, 42.18, 53.7, 53.7, 64.06, 64.06, 73.42, 82.44, 82.44, 90.81, 90.81, 98.43, 105.6, 105.6, 111.88, 111.88, 117.66, 122.89, 122.89, 127.54, 127.54, 131.02, 129.18, 129.18, 118.83]}, "io": {"node_filesystem_size_bytes": [212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0], "irate(node_disk_reads_completed_total": [0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.6666666666666666, 36.333333333333336, 30.333333333333332, 1.0, 0.6666666666666666, 1.0, 109.66666666666667, 47.333333333333336, 14.333333333333334, 47.333333333333336, 205.66666666666666, 27.333333333333332, 49.666666666666664, 1.3333333333333333, 135.0, 37.666666666666664, 78.0, 59.666666666666664, 229.0, 2.0, 46.666666666666664, 195.33333333333334, 390.0, 50.666666666666664, 62.333333333333336, 17.0, 29.666666666666668, 0.3333333333333333, 0.0, 41.0, 9.333333333333334, 1.0, 0.3333333333333333, 2.0, 12.0, 15.0, 2.6666666666666665, 22.0, 0.0, 15.0, 0.0, 0.0, 59.666666666666664, 3.3333333333333335, 0.0, 0.6666666666666666, 26.0, 38.0, 21.666666666666668, 17.333333333333332, 12.0], "node_disk_io_now": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_disk_read_bytes_total": [0.0, 0.0, 0.0, 0.0, 0.0, 2730.6666666666665, 0.0, 1365.3333333333333, 0.0, 2730.6666666666665, 660821.3333333334, 703146.6666666666, 4096.0, 2730.6666666666665, 4096.0, 2323797.3333333335, 946176.0, 88746.66666666667, 233472.0, 6063445.333333333, 897024.0, 795989.3333333334, 13653.333333333334, 2514944.0, 516096.0, 2609152.0, 1981098.6666666667, 6425258.666666667, 87381.33333333333, 2348373.3333333335, 954368.0, 5540522.666666667, 1325738.6666666667, 2715648.0, 420522.6666666667, 1077248.0, 1365.3333333333333, 0.0, 1078613.3333333333, 518826.6666666667, 4096.0, 1365.3333333333333, 53248.0, 98304.0, 578901.3333333334, 98304.0, 253952.0, 0.0, 595285.3333333334, 0.0, 0.0, 248490.66666666666, 13653.333333333334, 0.0, 2730.6666666666665, 830122.6666666666, 1008981.3333333334, 1396736.0, 398677.3333333333, 49152.0], "irate(node_disk_read_time_seconds_total": [0.0, 0.0, 0.0, 0.0, 0.0, 0.012999999996585151, 0.0, 0.0, 0.0, 0.0016666666682188709, 0.11533333330104749, 0.09500000001086543, 0.018000000001241762, 0.007666666681567828, 0.029333333329608042, 0.9933333333271245, 1.3566666666495923, 0.15666666669615856, 0.10333333331315468, 1.1923333333494763, 0.4236666666499029, 0.9610000000102445, 0.050000000007761024, 1.0239999999757856, 1.172000000020489, 2.8009999999776483, 2.021999999997206, 4.542333333364998, 0.0803333333072563, 0.2616666666775321, 0.0636666666638727, 0.78666666666201, 0.05100000001645336, 0.11700000000807147, 0.02999999998913457, 0.1083333333178113, 0.0, 0.0, 0.06300000000434618, 0.029333333329608042, 0.0, 0.0003333333491658171, 0.0, 0.006000000013348957, 0.045999999972991645, 0.0006666666595265269, 0.021000000027318794, 0.0, 0.03899999998975545, 0.0, 0.0, 0.04233333332619319, 0.0006666666595265269, 0.0, 0.0, 0.06900000001769513, 0.03733333332153658, 0.0613333333361273, 0.034999999993791185, 0.03200000000651926]}, "memory": {"node_memory_Inactive_anon_bytes": [233639936.0, 233639936.0, 297340928.0, 645787648.0, 858333184.0, 994586624.0, 1410961408.0, 1609715712.0, 1681817600.0, 2072154112.0, 2288951296.0, 2443890688.0, 2763046912.0, 2976579584.0, 3170316288.0, 3441963008.0, 3714469888.0, 3863355392.0, 4073107456.0, 4132630528.0, 4132626432.0, 4132626432.0, 4132626432.0, 4132626432.0, 4132626432.0, 4132626432.0, 4132626432.0, 4132626432.0, 4132626432.0, 212324352.0, 212324352.0, 280133632.0, 280129536.0, 280129536.0, 280129536.0, 280129536.0, 280137728.0, 280137728.0, 280039424.0, 279678976.0, 279707648.0, 279703552.0, 279965696.0, 279883776.0, 279932928.0, 280076288.0, 280084480.0, 280084480.0, 280072192.0, 280080384.0, 279777280.0, 279707648.0, 279719936.0, 278269952.0, 274472960.0, 267939840.0, 255156224.0, 241369088.0, 220807168.0, 212353024.0]}, "network": {"node_sockstat_TCP_tw": [9.0, 9.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 7.0, 7.0, 5.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 5.0, 8.0, 8.0, 7.0, 7.0, 10.0, 10.0, 10.0, 9.0, 10.0, 10.0, 10.0, 10.0, 12.0, 14.0, 14.0, 14.0, 14.0, 13.0, 13.0, 10.0, 10.0, 11.0, 11.0, 11.0, 11.0, 12.0, 12.0, 11.0, 12.0], "node_sockstat_TCP_orphan": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_netstat_Tcp_PassiveOpens": [0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 59.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 1.0, 1.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 0.0, 0.0, 0.0], "node_sockstat_TCP_alloc": [21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 21.0, 21.0, 197.0, 197.0, 197.0, 197.0, 197.0, 197.0, 197.0, 197.0, 199.0, 200.0, 201.0, 202.0, 200.0, 197.0, 197.0, 198.0, 198.0, 198.0, 198.0, 198.0, 200.0, 202.0, 201.0, 202.0, 202.0, 176.0, 122.0, 70.0, 21.0], "node_sockstat_TCP_inuse": [12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 12.0, 12.0, 188.0, 188.0, 188.0, 188.0, 188.0, 188.0, 188.0, 188.0, 190.0, 190.0, 190.0, 190.0, 188.0, 188.0, 188.0, 189.0, 189.0, 189.0, 189.0, 189.0, 191.0, 192.0, 190.0, 190.0, 190.0, 167.0, 113.0, 61.0, 12.0]}}}, "1": {"start_time": "1697297388", "end_time": "1697297503", "start_timestamp": "2023-10-14 23:29:48", "end_timestamp": "2023-10-14 23:31:43", "alerts": [{"receiver": "db-gpt", "status": "resolved", "alerts": [{"status": "resolved", "labels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "annotations": {"description": "node:ins:stdload1[ins=] = 1.50 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.50"}, "startsAt": "2023-10-14T23:29:49.467858611Z", "endsAt": "2023-10-15T00:26:49.467858611Z", "generatorURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9090/graph?g0.expr=node%3Ains%3Astdload1+%3E+1&g0.tab=1", "fingerprint": "ab4787213c7dd319"}], "groupLabels": {"alertname": "NodeLoadHigh"}, "commonLabels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "commonAnnotations": {"description": "node:ins:stdload1[ins=] = 1.50 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.50"}, "externalURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9093", "version": "4", "groupKey": "{}:{alertname=\"NodeLoadHigh\"}", "truncatedAlerts": 0}], "labels": ["too many indexes"], "command": "python anomaly_trigger/main.py --anomaly REDUNDANT_INDEX", "script": "import  psycopg2\nimport sys\nsys.path.append('/root/DB-GPT/')\nimport time\nimport datetime\nimport random\nimport yaml\nfrom multiprocessing.pool import *\n\n\nclass DBArgs(object):\n\n    def __init__(self, dbtype, config, dbname=None):\n        self.dbtype = dbtype\n        if self.dbtype == 'mysql':\n            self.host = config['host']\n            self.port = config['port']\n            self.user = config['user']\n            self.password = config['password']\n            self.dbname = dbname if dbname else config['dbname']\n            self.driver = 'com.mysql.jdbc.Driver'\n            self.jdbc = 'jdbc:mysql://'\n        else:\n            self.host = config['host']\n            self.port = config['port']\n            self.user = config['user']\n            self.password = config['password']\n            self.dbname = dbname if dbname else config['dbname']\n            self.driver = 'org.postgresql.Driver'\n            self.jdbc = 'jdbc:postgresql://'\n\nclass Database():\n    def __init__(self, args, timeout=-1):\n        self.args = args\n        self.conn = self.resetConn(timeout)\n\n\n        # self.schema = self.compute_table_schema()\n\n    def resetConn(self, timeout=-1):\n        conn = psycopg2.connect(database=self.args.dbname,\n                                            user=self.args.user,\n                                            password=self.args.password,\n                                            host=self.args.host,\n                                            port=self.args.port)\n        return conn\n    \n    def execute_sqls(self,sql):\n        self.conn =self.resetConn(timeout=-1)\n        cur = self.conn.cursor()\n        cur.execute(sql)\n        self.conn.commit()\n        cur.close()\n        self.conn.close()\n\n    def execute_sql_duration(self, duration, sql, max_id=0, commit_interval=500):\n        self.conn = self.resetConn(timeout=-1)\n        cursor = self.conn.cursor()\n        start = time.time()\n        cnt = 0\n        if duration > 0:\n            while (time.time() - start) < duration:\n                if max_id > 0:\n                    id = random.randint(1, max_id - 1)\n                    cursor.execute(sql + str(id) + ';')\n                else:\n                    cursor.execute(sql)\n                cnt += 1\n                if cnt % commit_interval == 0:\n                    self.conn.commit()\n        else:\n            print(\"error, the duration should be larger than 0\")\n        self.conn.commit()\n        cursor.close()\n        self.conn.close()\n        return cnt\n\n    def concurrent_execute_sql(self, threads, duration, sql, max_id=0, commit_interval=500):\n        pool = ThreadPool(threads)\n        results = [pool.apply_async(self.execute_sql_duration, (duration, sql, max_id, commit_interval)) for _ in range(threads)]\n        pool.close()\n        pool.join()\n        return results\n    \n    def build_index(self, table_name, idx_num):\n        self.conn = self.resetConn(timeout=-1)\n        cursor = self.conn.cursor()\n        \n        for i in range(0, idx_num):\n            the_sql = 'CREATE INDEX index_' + table_name + '_' + str(i) + ' ON ' + table_name + '(name' + str(i) + ');'\n            print(the_sql)\n            cursor.execute(the_sql)\n\n        \n        self.conn.commit()\n        self.conn.close()\n        return\n\n\n    \n    def drop_index(self,table_name):\n        self.conn = self.resetConn(timeout=-1)\n        cursor = self.conn.cursor()\n        cursor.execute(\"select indexname from pg_indexes where tablename='\"+table_name+\"';\")\n        idxs = cursor.fetchall()\n        for idx in idxs:\n            the_sql = 'DROP INDEX ' + idx[0] + ';'\n            cursor.execute(the_sql)\n            print(the_sql)\n        self.conn.commit()\n        self.conn.close()\n        return\n\n\ndef init():\n    #add the config\n    config_path = \"/root/DB-GPT/config/tool_config.yaml\"\n    with open(config_path, 'r') as config_file:\n        config = yaml.safe_load(config_file) \n    db_args =DBArgs('pgsql', config)\n    return db_args\n\n\n#create a table\ndef create_table(table_name,colsize, ncolumns):\n    db=Database(init())\n    column_definitions = ', '.join(f'name{i} varchar({colsize})' for i in range(ncolumns))\n    creat_sql = f'CREATE TABLE {table_name} (id int, {column_definitions}, time timestamp);'\n    db.execute_sqls(creat_sql)\n\n#delete the table\ndef delete_table(table_name):\n    db=Database(init())\n    delete_sql=f'DROP TABLE if exists {table_name}'\n    db.execute_sqls(delete_sql)\n\n#print the current time\ndef print_time():\n    current_time = datetime.datetime.now()\n    formatted_time = current_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(formatted_time)\n\ndef redundent_index(threads,duration,ncolumns,nrows,colsize,nindex,table_name='table1'):\n    #create a new table\n    print_time()\n    delete_table(table_name)\n    create_table(table_name,colsize, ncolumns)\n    db=Database(init())\n    # insert some data to be updated \n    insert_definitions = ', '.join(f'(SELECT substr(md5(random()::text), 1, {colsize}))' for i in range(ncolumns))\n    insert_data=f'insert into {table_name} select generate_series(1,{nrows}),{insert_definitions}, now();' \n    db.execute_sqls(insert_data) \n\n    #initialization of the indexes\n    nindex=int((nindex*ncolumns)/10)\n    db.build_index(table_name,nindex)\n    id_index='CREATE INDEX index_'+table_name+'_id ON '+table_name+'(id);'\n    db.execute_sqls(id_index)\n\n    #lock_contention\n    pool = Pool(threads)\n    for _ in range(threads):\n        pool.apply_async(\n            lock, (table_name, ncolumns, colsize, duration, nrows))\n    pool.close()\n    pool.join()\n\n    #drop the index\n    db.drop_index(table_name)\n\n    #delete the table\n    delete_table(table_name)\n    print_time()\n\n\ndef lock(table_name, ncolumns, colsize, duration, nrows):\n    args=init()\n    start = time.time()\n    #lock_contention\n    while time.time()-start < duration:\n        conn = psycopg2.connect(database=args.dbname, user=args.user, password=args.password,\n                                        host=args.host, port=args.port)\n        cur = conn.cursor()\n        while time.time()-start < duration:\n            col_name = random.randint(0, ncolumns-1)\n            row_name = random.randint(1, nrows-1)\n            lock_contention = f'update {table_name} set name{col_name}=(SELECT substr(md5(random()::text), 1, {colsize})) where id ={row_name}'\n            #db.concurrent_execute_sql(threads,duration,lock_contention,nrows)\n            cur.execute(lock_contention)\n            conn.commit()\n        conn.commit()\n        conn.close()\n\nif __name__ == \"__main__\":\n    # Number of threads to use for concurrent inserts\n    num_threads = 9\n    \n    # Duration for which to run the inserts (in seconds)\n    insert_duration = None\n    \n    # Number of columns in the table\n    num_columns = 57\n    \n    # Number of rows to insert\n    num_rows = 799006\n    \n    # Size of each column (in characters)\n    column_size = 56\n    \n    # Table name\n    table_name = 'table1'\n    \n    nindex=6\n    \n    # Call the insert_large_data function\n    redundent_index(num_threads, insert_duration, num_columns, num_rows, column_size, nindex,table_name)\n", "description": "In a digital marketing company, the database contains 57 columns and 799,006 rows of customer information. Each column has a size of 56 characters. Initially, a large number of indexes are created for customer attributes such as name, age, and gender. Then, nine users simultaneously perform queries on the customer data, and the indexes are deleted after the queries are completed. This simulates the additional storage and performance impact caused by redundant indexes.\n", "workload": {"CREATE INDEX index_table1_0 ON table1(name0);": 1, "CREATE INDEX index_table1_1 ON table1(name1);":1, "CREATE INDEX index_table1_2 ON table1(name2);": 1, "CREATE INDEX index_table1_3 ON table1(name3);": 1, "CREATE INDEX index_table1_4 ON table1(name4);": 1, "CREATE INDEX index_table1_5 ON table1(name5);": 1, "CREATE INDEX index_table1_id ON table1(id);": 1, "INSERT INTO table1 SELECT generate_series(1,799006),(SELECT substr(md5(random()::text), 1, 56), ... , now();": 1, "UPDATE table1 SET nameN=(SELECT substr(md5(random()::text), 1, 56) WHERE id =M;": 9}, "slow_queries": [], "exceptions": {"cpu": {"node_procs_running": [1.0, 1.0, 2.0, 7.0, 1.0, 3.0, 4.0, 5.0, 5.0, 7.0, 9.0, 6.0, 3.0, 4.0, 9.0, 3.0, 6.0, 5.0, 1.0, 16.0, 8.0, 7.0, 8.0, 12.0, 2.0, 3.0, 8.0, 2.0, 1.0, 17.0, 1.0, 7.0, 3.0, 1.0, 6.0, 6.0, 5.0, 8.0, 15.0], "node_procs_blocked": [0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 7.0, 2.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "node_entropy_available_bits": [3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3500.0, 3505.0, 3512.0, 3517.0, 3523.0, 3528.0, 3532.0, 3537.0, 3612.0, 3663.0, 3727.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0]}, "io": {"node_filesystem_size_bytes": [212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0], "irate(node_disk_reads_completed_total": [12.666666666666666, 0.0, 8.0, 2.0, 13.333333333333334, 5.333333333333333, 304.0, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.6666666666666666, 0.0, 0.6666666666666666, 3.0, 0.0, 599.3333333333334, 10178.666666666666, 2960.3333333333335, 978.0, 538.0, 364.3333333333333, 90.33333333333333, 92.33333333333333, 955.3333333333334, 1650.3333333333333, 2002.0, 136.33333333333334, 79.66666666666667, 231.33333333333334, 18.666666666666668, 153.66666666666666, 124.0, 49.0, 13.666666666666666, 45.0], "node_disk_io_now": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_disk_read_bytes_total": [132437.33333333334, 0.0, 32768.0, 8192.0, 72362.66666666667, 62805.333333333336, 4501504.0, 2730.6666666666665, 1365.3333333333333, 1365.3333333333333, 1365.3333333333333, 1365.3333333333333, 1365.3333333333333, 0.0, 2730.6666666666665, 0.0, 4096.0, 12288.0, 0.0, 8385877.333333333, 133707093.33333333, 25123498.666666668, 8075946.666666667, 5025792.0, 3840682.6666666665, 756394.6666666666, 686762.6666666666, 8050005.333333333, 14834346.666666666, 16657066.666666666, 1148245.3333333333, 670378.6666666666, 5040810.666666667, 109226.66666666667, 802816.0, 1241088.0, 1033557.3333333334, 107861.33333333333, 705877.3333333334], "irate(node_disk_read_time_seconds_total": [0.045999999972991645, 0.0, 0.0016666666682188709, 0.0066666666728754835, 0.033000000015211604, 0.023000000005898375, 0.4609999999714394, 0.004666666694295903, 0.0, 0.004666666655490796, 0.0, 0.004666666655490796, 0.0, 0.0, 0.003999999995964269, 0.0, 0.004666666694295903, 0.0, 0.0, 0.30633333333147067, 15.914333333338922, 3.248666666642142, 2.3263333333500973, 1.8656666666502133, 0.5650000000217309, 0.6509999999931703, 0.2989999999990687, 6.897666666656733, 9.868333333327124, 1.5496666666585952, 0.34300000003228587, 0.20833333333333334, 0.4693333333125338, 0.07466666668187827, 0.7996666666585952, 0.13333333334109435, 0.4600000000015522, 0.01866666666076829, 0.04833333333954215]}, "memory": {"node_memory_Inactive_anon_bytes": [211820544.0, 211820544.0, 211824640.0, 211824640.0, 209211392.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209301504.0, 209088512.0, 209088512.0, 209104896.0, 209104896.0, 209104896.0, 209104896.0, 209104896.0, 209121280.0, 209108992.0, 209342464.0, 209342464.0, 209342464.0, 209526784.0, 209526784.0, 209526784.0, 209592320.0, 209592320.0, 209592320.0, 209596416.0, 209596416.0, 209596416.0]}, "network": {"node_sockstat_TCP_tw": [9.0, 10.0, 10.0, 10.0, 8.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 4.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 10.0, 10.0, 11.0, 11.0, 11.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 9.0, 9.0, 8.0, 9.0, 10.0, 10.0, 10.0], "node_sockstat_TCP_orphan": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_netstat_Tcp_PassiveOpens": [0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 3.3333333333333335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "node_sockstat_TCP_alloc": [21.0, 21.0, 22.0, 22.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 21.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0], "node_sockstat_TCP_inuse": [12.0, 12.0, 13.0, 13.0, 12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 12.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0]}}}, "9": {"start_time": "1697303864", "end_time": "1697303935", "start_timestamp": "2023-10-15 01:17:44", "end_timestamp": "2023-10-15 01:18:55", "alerts": [{"receiver": "db-gpt", "status": "resolved", "alerts": [{"status": "resolved", "labels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "annotations": {"description": "node:ins:stdload1[ins=] = 1.59 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.59"}, "startsAt": "2023-10-15T01:17:49.467858611Z", "endsAt": "2023-10-15T01:23:49.467858611Z", "generatorURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9090/graph?g0.expr=node%3Ains%3Astdload1+%3E+1&g0.tab=1", "fingerprint": "ab4787213c7dd319"}], "groupLabels": {"alertname": "NodeLoadHigh"}, "commonLabels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "commonAnnotations": {"description": "node:ins:stdload1[ins=] = 1.59 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.59"}, "externalURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9093", "version": "4", "groupKey": "{}:{alertname=\"NodeLoadHigh\"}", "truncatedAlerts": 0}], "labels": ["highly concurrent commits or highly concurrent inserts"], "command": "python anomaly_trigger/main.py --anomaly INSERT_LARGE_DATA", "script": "import  psycopg2\nimport sys\nsys.path.append('/root/DB-GPT/')\nimport time\nimport datetime\nimport random\nimport yaml\nfrom multiprocessing.pool import *\n\nclass DBArgs(object):\n\n    def __init__(self, dbtype, config, dbname=None):\n        self.dbtype = dbtype\n        if self.dbtype == 'mysql':\n            self.host = config['host']\n            self.port = config['port']\n            self.user = config['user']\n            self.password = config['password']\n            self.dbname = dbname if dbname else config['dbname']\n            self.driver = 'com.mysql.jdbc.Driver'\n            self.jdbc = 'jdbc:mysql://'\n        else:\n            self.host = config['host']\n            self.port = config['port']\n            self.user = config['user']\n            self.password = config['password']\n            self.dbname = dbname if dbname else config['dbname']\n            self.driver = 'org.postgresql.Driver'\n            self.jdbc = 'jdbc:postgresql://'\n\nclass Database():\n    def __init__(self, args, timeout=-1):\n        self.args = args\n        self.conn = self.resetConn(timeout)\n\n\n        # self.schema = self.compute_table_schema()\n\n    def resetConn(self, timeout=-1):\n        conn = psycopg2.connect(database=self.args.dbname,\n                                            user=self.args.user,\n                                            password=self.args.password,\n                                            host=self.args.host,\n                                            port=self.args.port)\n        return conn\n\n    def execute_sqls(self,sql):\n        self.conn =self.resetConn(timeout=-1)\n        cur = self.conn.cursor()\n        cur.execute(sql)\n        self.conn.commit()\n        cur.close()\n        self.conn.close()\n\n    def execute_sql_duration(self, duration, sql, max_id=0, commit_interval=500):\n        self.conn = self.resetConn(timeout=-1)\n        cursor = self.conn.cursor()\n        start = time.time()\n        cnt = 0\n        if duration > 0:\n            while (time.time() - start) < duration:\n                if max_id > 0:\n                    id = random.randint(1, max_id - 1)\n                    cursor.execute(sql + str(id) + ';')\n                else:\n                    cursor.execute(sql)\n                cnt += 1\n                if cnt % commit_interval == 0:\n                    self.conn.commit()\n        else:\n            print(\"error, the duration should be larger than 0\")\n        self.conn.commit()\n        cursor.close()\n        self.conn.close()\n        return cnt\n\n    def concurrent_execute_sql(self, threads, duration, sql, max_id=0, commit_interval=500):\n        pool = ThreadPool(threads)\n        results = [pool.apply_async(self.execute_sql_duration, (duration, sql, max_id, commit_interval)) for _ in range(threads)]\n        pool.close()\n        pool.join()\n        return results\n    \ndef init():\n    #add the config\n    config_path = \"/root/DB-GPT/config/tool_config.yaml\"\n    with open(config_path, 'r') as config_file:\n        config = yaml.safe_load(config_file) \n    db_args =DBArgs('pgsql', config)\n    return db_args\n\n#create a table\ndef create_table(table_name,colsize, ncolumns):\n    db=Database(init())\n    column_definitions = ', '.join(f'name{i} varchar({colsize})' for i in range(ncolumns))\n    creat_sql = f'CREATE TABLE {table_name} (id int, {column_definitions}, time timestamp);'\n    db.execute_sqls(creat_sql)\n\n#delete the table\ndef delete_table(table_name):\n    db=Database(init())\n    delete_sql=f'DROP TABLE if exists {table_name}'\n    db.execute_sqls(delete_sql)\n\n#print the current time\ndef print_time():\n    current_time = datetime.datetime.now()\n    formatted_time = current_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    print(formatted_time)\n\n\ndef insert_large_data(threads,duration,ncolumns,nrows,colsize,table_name='table1'):\n\n    print_time()\n    #Delete undeleted tables\n    delete_table(table_name)\n    #create a new table\n    create_table(table_name,colsize, ncolumns)\n    db=Database(init())\n    #insert the data\n    #insert_definitions = ', '.join(f'repeat(round(random()*999)::text,{(colsize//3)})' for i in range(ncolumns))\n    insert_definitions = ', '.join(f'(SELECT substr(md5(random()::text), 1, {colsize}))' for i in range(ncolumns))\n    insert_data=f'insert into {table_name} select generate_series(1,{nrows}),{insert_definitions}, now();'\n    db.concurrent_execute_sql(threads,duration,insert_data,commit_interval=1)\n\n    #delete the table\n    delete_table(table_name)\n    \n    #print the end time\n    print_time()\nif __name__ == \"__main__\":\n    # Number of threads to use for concurrent inserts\n    num_threads = 98\n    \n    # Duration for which to run the inserts (in seconds)\n    insert_duration = None\n    \n    # Number of columns in the table\n    num_columns = 16\n    \n    # Number of rows to insert\n    num_rows = 66\n    \n    # Size of each column (in characters)\n    column_size = 48\n    \n    # Table name\n    table_name = 'table1'\n    \n    # Call the insert_large_data function\n    insert_large_data(num_threads, insert_duration, num_columns, num_rows, column_size, table_name)\n", "description": "In a real-life scenario, 98 sensors are generating a large amount of data that needs to be inserted into a database simultaneously. The database table has 16 columns, each with a size of 48 characters, and there are 66 rows of data to be inserted. By simulating this process, we can observe and analyze any exceptions or issues that might arise due to this high-volume data insertion.\n", "workload": {"insert into 'table1' select generate_series(1,66),(SELECT substr(md5(random()::text), 1, 48)), now();": 98}, "slow_queries": [], "exceptions": {"cpu": {"node_procs_blocked": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "node_entropy_available_bits": [3504.0, 3507.0, 3507.0, 3535.0, 3606.0, 3676.0, 3750.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0]}, "io": {"node_filesystem_size_bytes": [212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0], "irate(node_disk_reads_completed_total": [0.0, 123.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 19.666666666666668, 0.0, 0.0, 0.0, 22.0, 0.0, 0.3333333333333333, 0.0, 19.0, 0.0, 0.0, 0.0, 30.333333333333332, 0.0], "node_disk_io_now": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_disk_read_bytes_total": [0.0, 3107498.6666666665, 0.0, 0.0, 0.0, 0.0, 0.0, 1365.3333333333333, 0.0, 0.0, 1112746.6666666667, 0.0, 0.0, 0.0, 94208.0, 0.0, 1365.3333333333333, 0.0, 1058133.3333333333, 0.0, 0.0, 0.0, 1181013.3333333333, 0.0], "irate(node_disk_read_time_seconds_total": [0.0, 0.06633333334078391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17766666668467224, 0.0, 0.0, 0.0, 0.004666666655490796, 0.0, 0.0, 0.0, 0.04833333333954215, 0.0, 0.0, 0.0, 0.06333333331470688, 0.0]}, "memory": {}, "network": {"node_sockstat_TCP_tw": [11.0, 11.0, 11.0, 10.0, 10.0, 10.0, 10.0, 10.0, 8.0, 8.0, 8.0, 4.0, 4.0, 7.0, 7.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0], "node_sockstat_TCP_orphan": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_netstat_Tcp_PassiveOpens": [0.0, 1.3333333333333333, 0.0, 32.666666666666664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.6666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "node_sockstat_TCP_alloc": [22.0, 22.0, 22.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 120.0, 22.0], "node_sockstat_TCP_inuse": [13.0, 13.0, 13.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 111.0, 13.0]}}},"57": {"start_time": "1697353738", "end_time": "1697353799", "start_timestamp": "2023-10-15 15:08:58", "end_timestamp": "2023-10-15 15:09:59", "alerts": [{"receiver": "db-gpt", "status": "resolved", "alerts": [{"status": "resolved", "labels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "annotations": {"description": "node:ins:stdload1[ins=] = 1.69 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.69"}, "startsAt": "2023-10-15T15:09:49.467858611Z", "endsAt": "2023-10-15T15:12:49.467858611Z", "generatorURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9090/graph?g0.expr=node%3Ains%3Astdload1+%3E+1&g0.tab=1", "fingerprint": "ab4787213c7dd319"}], "groupLabels": {"alertname": "NodeLoadHigh"}, "commonLabels": {"alertname": "NodeLoadHigh", "category": "node", "instance": "172.27.58.65:9100", "job": "node", "level": "1", "severity": "WARN"}, "commonAnnotations": {"description": "node:ins:stdload1[ins=] = 1.69 > 100%\n", "summary": "WARN NodeLoadHigh @172.27.58.65:9100 1.69"}, "externalURL": "http://iZ2ze0ree1kf7ccu4p1vcyZ:9093", "version": "4", "groupKey": "{}:{alertname=\"NodeLoadHigh\"}", "truncatedAlerts": 0}], "labels": ["POOR JOIN PERFORMANCE", "CPU CONTENTION"], "command": "python anomaly_trigger/main.py --anomaly POOR_JOIN_PERFORMANCE,CPU_CONTENTION", "script": "import  os\nimport re\nimport time\n\nimport psycopg2\n\n\nREPEATCOUNT = 1\nTIMELOGPATH = str(int(time.time())) + \"_job_trigger_time_log.txt\"\nTIMELOG = open(TIMELOGPATH, 'w+')\n\n\nclass Database():\n\n    def __init__(self):\n        self.conn = None\n        self.conn = psycopg2.connect(database='imdbload',\n                                     user='xxxx',\n                                     password='xxxx',\n                                     host='xxxx',\n                                     port=5432)\n\n    def execute_sql(self, sql):\n        fail = 1\n        cur = self.conn.cursor()\n        i = 0\n        cnt = 3\n        while fail == 1 and i < cnt:\n            try:\n                fail = 0\n                cur.execute(sql)\n            except BaseException as error:\n                fail = 1\n                print(error)\n            res = []\n            if fail == 0:\n                res = cur.fetchall()\n            i = i + 1\n        if fail == 1:\n            # print(\"SQL Execution Fatal!!\", sql)\n            return 0, ''\n        elif fail == 0:\n            return 1, res\n\n\ndef all_sql_files():\n    res_path = \"{}/join-order-benchmark-master/\".format(\n        os.path.dirname(os.path.abspath(__file__)))\n    # all_file_list = list(filter(file_filter, os.listdir(res_path)))\n    # all_file_list = sorted(all_file_list, key=custom_sort)\n    all_file_list = [\n        '1a.sql', '1b.sql', '1c.sql', '1d.sql',\n        '2a.sql', '2b.sql', '2c.sql', '2d.sql',\n        '3a.sql', '3b.sql', '3c.sql',\n        '4a.sql', '4b.sql', '4c.sql',\n        '5a.sql', '5b.sql', '5c.sql',\n        '6a.sql', '6b.sql', '6c.sql', '6d.sql', '6e.sql', '6f.sql',\n        '7a.sql', '7b.sql', '7c.sql',\n        '8a.sql', '8b.sql', '8c.sql', '8d.sql',\n        '9a.sql', '9b.sql', '9c.sql', '9d.sql',\n        '10a.sql', '10b.sql', '10c.sql',\n        '11a.sql', '11b.sql', '11c.sql', '11d.sql',\n        '12a.sql', '12b.sql', '12c.sql',\n        '13a.sql', '13b.sql', '13c.sql', '13d.sql',\n        '14a.sql', '14b.sql', '14c.sql',\n        '15a.sql', '15b.sql', '15c.sql', '15d.sql',\n        '16a.sql', '16b.sql', '16c.sql', '16d.sql',\n        '17a.sql', '17b.sql', '17c.sql', '17d.sql', '17e.sql', '17f.sql',\n        '18a.sql', '18b.sql', '18c.sql',\n        '19a.sql', '19b.sql', '19c.sql', '19d.sql',\n        '20a.sql', '20b.sql', '20c.sql',\n        '21a.sql', '21b.sql', '21c.sql',\n        '22a.sql', '22b.sql', '22c.sql', '22d.sql',\n        '23a.sql', '23b.sql', '23c.sql',\n        '24a.sql', '24b.sql',\n        '25a.sql', '25b.sql', '25c.sql',\n        '26a.sql', '26b.sql', '26c.sql',\n        '27a.sql', '27b.sql', '27c.sql',\n        '28a.sql', '28b.sql', '28c.sql',\n        '29a.sql', '29b.sql', '29c.sql',\n        '30a.sql', '30b.sql', '30c.sql',\n        '31a.sql', '31b.sql', '31c.sql',\n        '32a.sql', '32b.sql',\n        '33a.sql', '33b.sql', '33c.sql']\n\n    print(all_file_list)\n    files_list = []\n    for file in all_file_list:\n        files_list.append(res_path + file)\n    return files_list\n\n\ndef custom_sort(item):\n    # \u63d0\u53d6\u6570\u5b57\u548c\u5b57\u6bcd\u90e8\u5206\n    match = re.match(r'(\\d+)(\\D+)', item)\n    # \u5c06\u6570\u5b57\u90e8\u5206\u8f6c\u6362\u4e3a\u6574\u6570\u4ee5\u8fdb\u884c\u6bd4\u8f83\n    num_part = int(match.group(1))\n    # \u8fd4\u56de\u5143\u7ec4\u4ee5\u6309\u6570\u5b57\u548c\u5b57\u6bcd\u6392\u5e8f\n    return (num_part, match.group(2))\n\n\ndef file_filter(f):\n    if f[-4:] == '.sql' and 'schema' not in f and 'fkindexes' not in f:\n        return True\n    else:\n        return False\n\n\ndef get_sql_from_file(file_name):\n    file = open(file_name)\n    lines = file.readlines().copy()\n    sql = ''\n    for line in lines:\n        sql += line\n    sql = sql.replace('\n', ' ').replace('   ', ' ').replace('  ', ' ')\n    file.close()\n    return sql\n\n\ndef test_hint_from_file(sql_file):\n    db = Database()\n    sql = get_sql_from_file(sql_file)\n    success, result_cont = db.execute_sql(sql)\n    print(success, result_cont)\n\n\ndef test_all():\n    sql_files = all_sql_files()\n\n    for sql_file in list(sql_files)[:-10]:\n        if sql_file:\n            test_hint_from_file(sql_file)\n\n\ndef test_one():\n    res_path = \"{}/join-order-benchmark-master/\".format(\n        os.path.dirname(os.path.abspath(__file__)))\n    test_hint_from_file(res_path + '1a.sql')\n\n\nif __name__ == '__main__':\n    for i in range(0, REPEATCOUNT):\n        TIMELOG.write(str(int(time.time()))+\";\")\n        test_all()\n        TIMELOG.write(str(int(time.time()))+\"\n\")\n        TIMELOG.flush()\n\n    TIMELOG.close()\n\n)\n", "description": "In an online database where multiple tasks are running simultaneously, there is a performance issue with joining tables in a database query. This is causing the CPU to become overloaded, leading to contention and slowing down the overall system performance.\n", "workload": {"SELECT MIN(mc.note) AS production_note, MIN(t.title) AS movie_title, MIN(t.production_year) AS movie_year FROM company_type AS ct, info_type AS it, movie_companies AS mc, movie_info_idx AS mi_idx, title AS t WHERE ct.kind = 'production companies' AND it.info = 'top 250 rank' AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%' AND (mc.note LIKE '%(co-production)%' OR mc.note LIKE '%(presents)%') AND ct.id = mc.company_type_id AND t.id = mc.movie_id AND t.id = mi_idx.movie_id AND mc.movie_id = mi_idx.movie_id AND it.id = mi_idx.info_type_id;": 103}, "slow_queries": ["SELECT MIN(mc.note) AS production_note, MIN(t.title) AS movie_title, MIN(t.production_year) AS movie_year FROM company_type AS ct, info_type AS it, movie_companies AS mc, movie_info_idx AS mi_idx, title AS t WHERE ct.kind = 'production companies' AND it.info = 'top 250 rank' AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%' AND (mc.note LIKE '%(co-production)%' OR mc.note LIKE '%(presents)%') AND ct.id = mc.company_type_id AND t.id = mc.movie_id AND t.id = mi_idx.movie_id AND mc.movie_id = mi_idx.movie_id AND it.id = mi_idx.info_type_id;"], "exceptions": {"cpu": {"node_procs_running": [1.0, 10.0, 8.0, 8.0, 6.0, 5.0, 3.0, 6.0, 6.0, 8.0, 5.0, 8.0, 5.0, 6.0, 5.0, 12.0, 10.0, 6.0, 5.0, 5.0, 9.0], "node_procs_blocked": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "node_entropy_available_bits": [3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0, 3754.0], "node_load1": [7.14, 7.14, 6.88, 6.65, 6.65, 6.6, 6.6, 6.39, 6.6, 6.6, 6.47, 6.47, 6.35, 6.25, 6.25, 6.15, 6.15, 5.89, 5.82, 5.82, 5.68]}, "io": {"node_filesystem_size_bytes": [212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0, 212300566528.0], "1-(node_filesystem_free_bytes": [0.44161838991435143, 0.44161910377019487, 0.44161910377019487, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996, 0.4416191809437996], "node_disk_io_now": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_disk_read_bytes_total": [0.0, 75826517.33333333, 0.0, 666282.6666666666, 0.0, 0.0, 1365.3333333333333, 0.0, 96938.66666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_disk_read_time_seconds_total": [0.0, 2.9626666666784636, 0.0, 0.020333333328987162, 0.0, 0.0, 0.0, 0.0, 0.002333333327745398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "memory": {"irate(node_disk_write_time_seconds_total": [0.0, 0.00033333331036070984, 0.00033333331036070984, 0.0016666667070239782, 0.0, 0.0, 0.0, 0.0, 0.00033333331036070984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006666666983316342, 0.0, 0.00033333331036070984, 0.0], "node_memory_Buffers_bytes": [18862080.0, 18882560.0, 18890752.0, 19046400.0, 19054592.0, 19054592.0, 19066880.0, 19066880.0, 19079168.0, 19079168.0, 19087360.0, 19087360.0, 19087360.0, 19095552.0, 19103744.0, 19103744.0, 19103744.0, 19103744.0, 19103744.0, 19111936.0, 19111936.0]}, "network": {"node_sockstat_TCP_tw": [7.0, 7.0, 8.0, 8.0, 8.0, 7.0, 7.0, 7.0, 8.0, 8.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 5.0, 5.0, 5.0], "node_sockstat_TCP_orphan": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "irate(node_netstat_Tcp_PassiveOpens": [0.3333333333333333, 1.0, 1.6666666666666667, 2.0, 2.0, 2.0, 1.6666666666666667, 2.0, 2.3333333333333335, 1.6666666666666667, 2.0, 2.0, 2.0, 1.6666666666666667, 2.0, 2.0, 2.0, 1.6666666666666667, 2.0, 2.0, 2.3333333333333335], "node_sockstat_TCP_alloc": [22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0], "node_sockstat_TCP_inuse": [12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0]}}}}